#!/usr/bin/env python3
"""
ACTIVITY_DASHBOARD Dashboard
Generated by Dashboard Factory v1.0.0
Auto-generated on 2025-08-13T18:22:59.601Z
"""

import streamlit as st
import pandas as pd
from snowflake.snowpark.context import get_active_session
from snowflake.snowpark import Session
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta

# Dashboard Configuration
DASHBOARD_NAME = "ACTIVITY DASHBOARD"
TIMEZONE = "America/Chicago"
REFRESH_SCHEDULE = "6:00 AM Chicago daily"
THEME_CONFIG = {
  "primary": "#1f4e79",
  "secondary": "#2e86ab",
  "accent": "#a23b72",
  "background": "#f8f9fa"
}

# Initialize Snowflake session
@st.cache_resource
def init_snowflake_session():
    """Initialize Snowflake session using Snowpark."""
    try:
        # Use active session in Snowflake environment
        session = get_active_session()
        return session
    except:
        # Fallback for local development
        st.error("‚ùå Snowflake session not available. Run this app in Snowflake Streamlit.")
        st.stop()

# Data loading functions

@st.cache_data(ttl=3600)  # Cache for 1 hour
def load_panel_1_data():
    """Load data for panel_1 panel."""
    session = init_snowflake_session()
    
    query = '''
        SELECT *,
               ROW_NUMBER() OVER (ORDER BY metric_value DESC) as rank_num
        FROM activity_dashboard__panel_1_top__5ceb197b
        ORDER BY metric_value DESC
        LIMIT 10
    '''
    
    try:
        df = session.sql(query).to_pandas()
        return df
    except Exception as e:
        st.error(f"‚ùå Error loading panel_1 data: {str(e)}")
        return pd.DataFrame()


@st.cache_data(ttl=3600)  # Cache for 1 hour
def load_panel_3_data():
    """Load data for panel_3 panel."""
    session = init_snowflake_session()
    
    query = '''
        SELECT *,
               ROW_NUMBER() OVER (ORDER BY metric_value DESC) as rank_num
        FROM activity_dashboard__panel_3__5ceb197b
        ORDER BY metric_value DESC
        
    '''
    
    try:
        df = session.sql(query).to_pandas()
        return df
    except Exception as e:
        st.error(f"‚ùå Error loading panel_3 data: {str(e)}")
        return pd.DataFrame()


@st.cache_data(ttl=3600)  # Cache for 1 hour
def load_panel_4_data():
    """Load data for panel_4 panel."""
    session = init_snowflake_session()
    
    query = '''
        SELECT *,
               ROW_NUMBER() OVER (ORDER BY metric_value DESC) as rank_num
        FROM activity_dashboard__panel_4__5ceb197b
        ORDER BY metric_value DESC
        
    '''
    
    try:
        df = session.sql(query).to_pandas()
        return df
    except Exception as e:
        st.error(f"‚ùå Error loading panel_4 data: {str(e)}")
        return pd.DataFrame()


# Visualization functions  

def render_panel_1_panel():
    """Render panel_1 chart panel."""
    st.subheader("üìä PANEL 1")
    
    df = load_panel_1_data()
    
    if df.empty:
        st.warning("No data available for this panel.")
        return
    
    # Bar chart visualization
    fig = px.bar(
        df.head(10), 
        x='activity',
        y='metric_value',
        title="Count by activity",
        labels={'metric_value': 'Count'}
    )
    
    fig.update_layout(
        height=400,
        xaxis_tickangle=-45
    )
    
    st.plotly_chart(fig, use_container_width=True)


def render_panel_3_panel():
    """Render panel_3 timeseries panel."""
    st.subheader("üìà PANEL 3")
    
    df = load_panel_3_data()
    
    if df.empty:
        st.warning("No data available for this panel.")
        return
    
    # Ensure we have date column for timeseries
    date_cols = [col for col in df.columns if 'date' in col.lower() or 'time' in col.lower()]
    if not date_cols:
        st.error("No date column found for timeseries visualization.")
        return
    
    date_col = date_cols[0]
    df[date_col] = pd.to_datetime(df[date_col])
    
    # Create timeseries chart
    fig = px.line(
        df, 
        x=date_col, 
        y='metric_value',
        color='ts' if 'ts' in df.columns else None,
        title=f"Count Trends Over Time",
        labels={'metric_value': 'Count', date_col: 'Date'}
    )
    
    fig.update_layout(
        height=400,
        showlegend=True,
        hovermode='x unified'
    )
    
    st.plotly_chart(fig, use_container_width=True)
    
    # Summary stats
    col1, col2 = st.columns(2)
    with col1:
        st.metric("Total Count", f"{df['metric_value'].sum():,.0f}")
    with col2:
        latest_value = df.loc[df[date_col].idxmax(), 'metric_value']
        st.metric("Latest Count", f"{latest_value:,.0f}")


def render_panel_4_panel():
    """Render panel_4 metric panel."""
    st.subheader("üéØ PANEL 4")
    
    df = load_panel_4_data()
    
    if df.empty:
        st.warning("No data available for this panel.")
        return
    
    # Large metric display
    total_value = df['metric_value'].sum()
    
    st.markdown(f'''
    <div class="metric-card">
        <h1 style="text-align: center; color: {THEME_CONFIG['primary']}; margin: 0;">
            {total_value:,.0f}
        </h1>
        <p style="text-align: center; margin: 0.5rem 0 0 0; font-size: 1.2rem;">
            Count
        </p>
    </div>
    ''', unsafe_allow_html=True)
    
    # Breakdown by category if group_by exists
    if len(df) > 1:
        st.subheader("üìä Breakdown")
        
        fig = px.pie(
            df, 
            values='metric_value',
            names='customer_name',
            title=f"Count by Category"
        )
        
        fig.update_layout(height=300)
        st.plotly_chart(fig, use_container_width=True)


# Main dashboard layout
def main():
    """Main dashboard application."""
    
    # Configure page
    st.set_page_config(
        page_title=DASHBOARD_NAME,
        page_icon="üìä",
        layout="wide",
        initial_sidebar_state="expanded"
    )
    
    # Custom CSS styling
    st.markdown(f'''
    <style>
    .main-header {{
        background: linear-gradient(90deg, {THEME_CONFIG['primary']}, {THEME_CONFIG['secondary']});
        padding: 1rem;
        border-radius: 10px;
        margin-bottom: 2rem;
    }}
    .metric-card {{
        background-color: {THEME_CONFIG['background']};
        padding: 1rem;
        border-radius: 8px;
        border-left: 4px solid {THEME_CONFIG['accent']};
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }}
    .refresh-info {{
        color: #666;
        font-size: 0.8rem;
        text-align: right;
        margin-top: 1rem;
    }}
    </style>
    ''', unsafe_allow_html=True)
    
    # Header
    st.markdown(f'''
    <div class="main-header">
        <h1 style="color: white; margin: 0;">üìä {DASHBOARD_NAME}</h1>
        <p style="color: #ddd; margin: 0.5rem 0 0 0;">{REFRESH_SCHEDULE}</p>
    </div>
    ''', unsafe_allow_html=True)
    
    # Sidebar controls
    with st.sidebar:
        st.header("üéõÔ∏è Dashboard Controls")
        
        # Refresh data button
        if st.button("üîÑ Refresh Data", type="primary"):
            st.cache_data.clear()
            st.rerun()
        
        st.markdown("---")
        
        # Data quality info
        session = init_snowflake_session()
        st.subheader("üìä Data Quality")
        
        # panel_1 quality
        panel_1_df = load_panel_1_data()
        if not panel_1_df.empty:
            st.write(f"‚úÖ panel_1: {len(panel_1_df)} records")
            if 'last_update_date' in panel_1_df.columns:
                latest_update = panel_1_df['last_update_date'].max()
                st.caption(f"Updated: {latest_update}")
        else:
            st.write(f"‚ùå panel_1: No data")


        # panel_3 quality
        panel_3_df = load_panel_3_data()
        if not panel_3_df.empty:
            st.write(f"‚úÖ panel_3: {len(panel_3_df)} records")
            if 'last_update_date' in panel_3_df.columns:
                latest_update = panel_3_df['last_update_date'].max()
                st.caption(f"Updated: {latest_update}")
        else:
            st.write(f"‚ùå panel_3: No data")


        # panel_4 quality
        panel_4_df = load_panel_4_data()
        if not panel_4_df.empty:
            st.write(f"‚úÖ panel_4: {len(panel_4_df)} records")
            if 'last_update_date' in panel_4_df.columns:
                latest_update = panel_4_df['last_update_date'].max()
                st.caption(f"Updated: {latest_update}")
        else:
            st.write(f"‚ùå panel_4: No data")

        
        st.markdown("---")
        st.caption(f"Dashboard v1.0.0 ‚Ä¢ Generated 8/13/2025")
    
    # Main content panels
    
    # Row 1
    col1, col2 = st.columns(2)
    
    with col1:
        render_panel_1_panel()
    
    with col2:
        render_panel_3_panel()


    # Single panel row
    render_panel_4_panel()

    
    # Footer
    st.markdown(f'''
    <div class="refresh-info">
        Last updated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')} {TIMEZONE}
    </div>
    ''', unsafe_allow_html=True)

if __name__ == "__main__":
    main()

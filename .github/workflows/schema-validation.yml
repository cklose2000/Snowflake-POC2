name: Schema Contract Validation

on:
  pull_request:
    branches: [ main ]
    paths:
      - 'schemas/**'
      - 'packages/**'
      - 'scripts/**'
      - 'package.json'
      - '.github/workflows/schema-validation.yml'
  push:
    branches: [ main ]
    paths:
      - 'schemas/**'
      - 'packages/**'

env:
  NODE_VERSION: '20'

jobs:
  contract-compliance:
    name: Contract Compliance Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run contract code generation
      run: npm run codegen
      
    - name: Check for generated file changes
      id: check-generated
      run: |
        if git diff --exit-code packages/snowflake-schema/generated.js; then
          echo "generated-files-synced=true" >> $GITHUB_OUTPUT
        else
          echo "generated-files-synced=false" >> $GITHUB_OUTPUT
          echo "Generated files are out of sync with contract"
          git diff packages/snowflake-schema/generated.js
        fi
        
    - name: Fail if generated files out of sync
      if: steps.check-generated.outputs.generated-files-synced == 'false'
      run: |
        echo "‚ùå Generated schema files are out of sync with contract"
        echo "Run 'npm run codegen' locally and commit the updated generated.js file"
        exit 1
        
    - name: Run contract compliance linter
      run: npm run lint:contract
      
    - name: Upload contract compliance report
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: contract-violations-report
        path: |
          contract-violations.log
        retention-days: 7

  snowflake-validation:
    name: Snowflake Schema Validation  
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && vars.ENABLE_SNOWFLAKE_VALIDATION == 'true'
    
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run schema code generation
      run: npm run codegen
      
    - name: Validate Snowflake schema
      env:
        SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT_STAGING }}
        SNOWFLAKE_USERNAME: ${{ secrets.SNOWFLAKE_USERNAME_STAGING }}
        SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD_STAGING }}
        SNOWFLAKE_ROLE: ${{ secrets.SNOWFLAKE_ROLE_STAGING }}
        SNOWFLAKE_WAREHOUSE: ${{ secrets.SNOWFLAKE_WAREHOUSE_STAGING }}
        SNOWFLAKE_DATABASE: ${{ secrets.SNOWFLAKE_DATABASE_STAGING }}
        SNOWFLAKE_SCHEMA: ${{ secrets.SNOWFLAKE_SCHEMA_STAGING }}
      run: |
        echo "üîç Validating schema against staging Snowflake..."
        npm run validate:runtime --skip-views --no-log || {
          echo "‚ùå Schema validation failed against staging environment"
          echo "This indicates drift between contract and live schema"
          exit 1
        }
        
    - name: Generate schema drift report
      if: failure()
      env:
        SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT_STAGING }}
        SNOWFLAKE_USERNAME: ${{ secrets.SNOWFLAKE_USERNAME_STAGING }}
        SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD_STAGING }}
        SNOWFLAKE_ROLE: ${{ secrets.SNOWFLAKE_ROLE_STAGING }}
        SNOWFLAKE_WAREHOUSE: ${{ secrets.SNOWFLAKE_WAREHOUSE_STAGING }}
        SNOWFLAKE_DATABASE: ${{ secrets.SNOWFLAKE_DATABASE_STAGING }}
        SNOWFLAKE_SCHEMA: ${{ secrets.SNOWFLAKE_SCHEMA_STAGING }}
      run: |
        echo "üìã Generating schema drift report..."
        npm run validate:runtime:fix || true
        
        if [ -f "fix-schema.sh" ]; then
          echo "## üîß Schema Drift Detected" >> drift-report.md
          echo "" >> drift-report.md
          echo "The live Snowflake schema does not match the contract." >> drift-report.md
          echo "" >> drift-report.md
          echo "### Remediation Script" >> drift-report.md
          echo '```bash' >> drift-report.md
          cat fix-schema.sh >> drift-report.md
          echo '```' >> drift-report.md
        fi
        
    - name: Comment PR with drift report
      if: failure() && github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          if (fs.existsSync('drift-report.md')) {
            const report = fs.readFileSync('drift-report.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });
          }
          
    - name: Upload drift artifacts
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: schema-drift-report
        path: |
          fix-schema.sh
          drift-report.md
        retention-days: 7

  security-scan:
    name: Security Scan for Schema Violations
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Scan for hardcoded credentials
      run: |
        echo "üîç Scanning for hardcoded credentials in schema files..."
        
        # Check for hardcoded connection strings
        if grep -r "snowflake://\|mongodb://\|postgresql://" schemas/ packages/ --include="*.js" --include="*.json"; then
          echo "‚ùå Hardcoded connection strings found"
          exit 1
        fi
        
        # Check for potential secrets
        if grep -r "password\s*=\|secret\s*=\|token\s*=" schemas/ packages/ --include="*.js" --include="*.json" | grep -v "process.env"; then
          echo "‚ùå Potential hardcoded secrets found"
          exit 1
        fi
        
        echo "‚úÖ No hardcoded credentials detected"
        
    - name: Validate contract schema
      run: |
        echo "üîç Validating contract schema structure..."
        node -e "
          const contract = require('./schemas/activity_v2.contract.json');
          
          // Validate required fields
          if (!contract.version || !contract.schemas || !contract.validation_rules) {
            console.error('‚ùå Invalid contract structure');
            process.exit(1);
          }
          
          // Validate schema references
          const schemas = Object.keys(contract.schemas);
          if (!schemas.includes('ACTIVITY') || !schemas.includes('ACTIVITY_CCODE')) {
            console.error('‚ùå Required schemas missing from contract');
            process.exit(1);
          }
          
          console.log('‚úÖ Contract schema validation passed');
        "

  contract-documentation:
    name: Generate Contract Documentation
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Generate contract documentation
      run: |
        echo "üìö Generating contract documentation..."
        
        node -e "
          const contract = require('./schemas/activity_v2.contract.json');
          const fs = require('fs');
          
          let doc = '# Activity Schema v2.0 Contract\\n\\n';
          doc += \`Generated from contract hash: \${contract.contractHash}\\n\`;
          doc += \`Version: \${contract.version}\\n\\n\`;
          
          doc += '## Schemas\\n\\n';
          for (const [name, schema] of Object.entries(contract.schemas)) {
            doc += \`### \${name}\\n\`;
            doc += \`\${schema.description}\\n\\n\`;
            
            if (schema.tables) {
              doc += '#### Tables\\n';
              for (const [tableName, table] of Object.entries(schema.tables)) {
                doc += \`- **\${tableName}**: \${table.description}\\n\`;
              }
              doc += '\\n';
            }
            
            if (schema.views) {
              doc += '#### Views\\n';
              for (const [viewName, view] of Object.entries(schema.views)) {
                doc += \`- **\${viewName}**: \${view.description}\\n\`;
              }
              doc += '\\n';
            }
          }
          
          fs.writeFileSync('CONTRACT.md', doc);
          console.log('‚úÖ Contract documentation generated');
        "
        
    - name: Commit documentation
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        if git diff --exit-code CONTRACT.md; then
          echo "No documentation changes"
        else
          git add CONTRACT.md
          git commit -m "docs: Update contract documentation [skip ci]"
          git push
        fi